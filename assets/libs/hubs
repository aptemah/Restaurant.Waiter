/*!
 * ASP.NET SignalR JavaScript Library v2.2.0
 * http://signalr.net/
 *
 * Copyright Microsoft Open Technologies, Inc. All rights reserved.
 * Licensed under the Apache 2.0
 * https://github.com/SignalR/SignalR/blob/master/LICENSE.md
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['baseHub'] = this.createHubProxy('baseHub'); 
        proxies['baseHub'].client = { };
        proxies['baseHub'].server = {
            hello: function () {
                return proxies['baseHub'].invoke.apply(proxies['baseHub'], $.merge(["Hello"], $.makeArray(arguments)));
             },

            statusForStaff: function (fituser, oponentUser) {
                return proxies['baseHub'].invoke.apply(proxies['baseHub'], $.merge(["StatusForStaff"], $.makeArray(arguments)));
             },

            statusForUser: function (fituser, oponentUser) {
                return proxies['baseHub'].invoke.apply(proxies['baseHub'], $.merge(["StatusForUser"], $.makeArray(arguments)));
             }
        };

        proxies['fitnessOptimaHub'] = this.createHubProxy('fitnessOptimaHub'); 
        proxies['fitnessOptimaHub'].client = { };
        proxies['fitnessOptimaHub'].server = {
            addMaster: function (sessionId, masterId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["AddMaster"], $.makeArray(arguments)));
             },

            checkOwnProfile: function (sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["CheckOwnProfile"], $.makeArray(arguments)));
             },

            clientsOnMasterPage: function (sessionId, master) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["ClientsOnMasterPage"], $.makeArray(arguments)));
             },

            connect: function (sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["Connect"], $.makeArray(arguments)));
             },

            connectToPersonalConversation: function (conversationId, sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["ConnectToPersonalConversation"], $.makeArray(arguments)));
             },

            conversationSearch: function (toUserId, sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["ConversationSearch"], $.makeArray(arguments)));
             },

            countAllMsgs: function (sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["CountAllMsgs"], $.makeArray(arguments)));
             },

            countForMainPage: function (sessionId, conversationId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["CountForMainPage"], $.makeArray(arguments)));
             },

            countMsgsFromInstructor: function (sessionId, instructorSocId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["CountMsgsFromInstructor"], $.makeArray(arguments)));
             },

            deleteInstructor: function (sessionId, instructorId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["DeleteInstructor"], $.makeArray(arguments)));
             },

            deleteRequest: function (sessionId, oponentId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["DeleteRequest"], $.makeArray(arguments)));
             },

            discardCallToMaster: function (sessionId, masterId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["DiscardCallToMaster"], $.makeArray(arguments)));
             },

            discardClient: function (sessionId, studentId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["DiscardClient"], $.makeArray(arguments)));
             },

            discardInstructor: function (sessionId, instructorId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["DiscardInstructor"], $.makeArray(arguments)));
             },

            discardStudent: function (sessionId, studentId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["DiscardStudent"], $.makeArray(arguments)));
             },

            friendConfirm: function (sessionId, requestedSocialUserId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["FriendConfirm"], $.makeArray(arguments)));
             },

            friendDelete: function (sessionId, deleteSocialUserId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["FriendDelete"], $.makeArray(arguments)));
             },

            friendDiscard: function (sessionId, deleteSocialUserId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["FriendDiscard"], $.makeArray(arguments)));
             },

            friendRequest: function (sessionId, confirmFriendId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["FriendRequest"], $.makeArray(arguments)));
             },

            giftBonus: function (session, conversationId, bonus) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["GiftBonus"], $.makeArray(arguments)));
             },

            hello: function () {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["Hello"], $.makeArray(arguments)));
             },

            isRead: function (sessionId, msgId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["IsRead"], $.makeArray(arguments)));
             },

            messages: function (sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["Messages"], $.makeArray(arguments)));
             },

            peopleInClub: function (sessionId, club) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["PeopleInClub"], $.makeArray(arguments)));
             },

            profile: function (sessionId, oponentId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["Profile"], $.makeArray(arguments)));
             },

            readed: function (sessionId, conversationId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["Readed"], $.makeArray(arguments)));
             },

            sendMsgToPrivateConversation: function (conversationId, message, sessionId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["SendMsgToPrivateConversation"], $.makeArray(arguments)));
             },

            status: function (user, oponent) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["Status"], $.makeArray(arguments)));
             },

            statusForStaff: function (fituser, oponentUser) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["StatusForStaff"], $.makeArray(arguments)));
             },

            statusForUser: function (fituser, oponentUser) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["StatusForUser"], $.makeArray(arguments)));
             },

            studentAdd: function (sessionId, studentId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["StudentAdd"], $.makeArray(arguments)));
             },

            studentDelete: function (sessionId, studentId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["StudentDelete"], $.makeArray(arguments)));
             },

            submitClient: function (sessionId, clientId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["SubmitClient"], $.makeArray(arguments)));
             },

            submitInstructor: function (sessionId, instructorId) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["SubmitInstructor"], $.makeArray(arguments)));
             },

            trainersMastersOnPeopleProfile: function (sessionId, socUser) {
                return proxies['fitnessOptimaHub'].invoke.apply(proxies['fitnessOptimaHub'], $.merge(["TrainersMastersOnPeopleProfile"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/Social/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));